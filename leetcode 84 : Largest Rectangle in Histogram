class Solution {
public: 
    vector<int> previous_sum(vector<int>& heights, int n) 
    {
        stack<int> s; 
        vector<int> prev; 
        
        for(int i=0;i<n;i++)
        {
            while(!s.empty() && heights[i] <= heights[s.top()]) 
            {
                s.pop(); 
            } 
            
            if(s.empty()) 
                prev.push_back(-1); 
            
            else 
                prev.push_back(s.top()); 
            
            s.push(i); 
            
        } 
        
        
        return prev; 
    } 
    
    vector<int> next_sum(vector<int>& heights, int n) 
    {
        stack<int> s; 
        vector<int> next; 
        
        for(int i=n-1;i>=0;i--)
        {
            while(!s.empty() && heights[i] <= heights[s.top()]) 
            {
                s.pop(); 
            } 
            
            if(s.empty()) 
                next.push_back(n); 
            
            else 
                next.push_back(s.top()); 
            
            s.push(i); 
            
        } 
         
        
        return next; 
    } 
    
    int largest(vector<int>& heights, int n) 
    {
        vector<int> prev; 
        vector<int> next; 
        
        prev = previous_sum(heights, n); 
        next = next_sum(heights, n); 
        
        int ans=INT_MIN; 
        
        for(int i=0;i<n;i++) 
        {
            ans = max(ans, (((next[n-1-i] - prev[i]) - 1) * heights[i])); 
        } 
                      
     return ans;
    } 
                      
    int largestRectangleArea(vector<int>& heights) {
        int n=heights.size(); 
        
        int ans=largest(heights, n); 
        
        return ans; 
    }
}; 
