class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> ans; 
        
        if(nums.empty()) 
        {
            return ans; 
        } 
        
        int n=nums.size(); 
        
        sort(nums.begin(), nums.end()); 
        
        for(int i=0;i<n;i++) 
        {
            for(int j=i+1;j<n;j++) 
            {
                int start=j+1; 
                int back=n-1; 
                int target3=target - (nums[i] + nums[j]); 
                while(start < back) 
                {
                    if(target3 == (nums[start] + nums[back])) 
                    {
                        vector<int> v(4, 0); 
                        v[0] = nums[i]; 
                        v[1] = nums[j]; 
                        v[2] = nums[start]; 
                        v[3] = nums[back]; 
                        ans.push_back(v); 
                        
                        while((start < back) && (nums[start] == v[2])) 
                        {
                            start++; 
                        } 
                        while((start < back) && (nums[start] == v[3])) 
                        {
                            back--; 
                        }
                    } 
                    else if(target3 > (nums[start] + nums[back])) 
                    {
                        start++; 
                    } 
                    else 
                    {
                        back--; 
                    }
                } 
                while((j+1 < n) && (nums[j+1] == nums[j])) 
                {
                    j++; 
                }
            } 
            while((i+1 < n) && (nums[i+1] == nums[i])) 
            {
                i++; 
            }
        } 
        return ans; 
    }
}; 

// time complexity : o(n^3) 
// space complexity : o(1) 
