class Solution {
public: 
    
    void mark_cur_island(vector<vector<char>>& grid, int x, int y, int row, int column) 
    {
        if((x < 0) || (y < 0) || (x > row-1) || (y > column-1) || (grid[x][y] != '1')) 
        {
            return; 
        } 
        
        grid[x][y] = '2'; 
        
        mark_cur_island(grid, x+1, y, row, column); 
        mark_cur_island(grid, x, y+1, row, column); 
        mark_cur_island(grid, x-1, y, row, column); 
        mark_cur_island(grid, x, y-1, row, column); 
    } 
    
    int numIslands(vector<vector<char>>& grid) {
       ios_base::sync_with_stdio(false); 
       cin.tie(NULL); 
        
        int row=grid.size(); 
        int column=grid[0].size(); 
        
        if(row == 0) 
        {
            return 0; 
        } 
        
        int island=0; 
        
        for(int i=0;i<row;i++) 
        {
            for(int j=0;j<column;j++) 
            {
                if(grid[i][j] == '1') 
                {
                    mark_cur_island(grid, i, j, row, column); 
                    island++; 
                }
            }
        } 
        return island; 
        }
}; 

// time complexity : o(n) 
// space complexity : o((m*n) * (memory for each cell)) 
